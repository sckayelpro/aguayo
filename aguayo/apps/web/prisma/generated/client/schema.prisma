// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== MODELOS DE NEXTAUTH CON NOMBRES DE TABLAS ESTÁNDAR =====
// Estos modelos no necesitan cambios
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("nextauth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nextauth_sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile? // Relación opcional a Profile

  @@map("nextauth_users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("nextauth_verification_tokens")
}

// ===== MODELOS DE APLICACIÓN =====
model Profile {
  id           String    @id @default(cuid())
  authUserId   String    @unique
  user         User      @relation(fields: [authUserId], references: [id])
  email        String    @unique
  role         Role      @default(CLIENT)
  fullName     String?
  phoneNumber  String?
  profileImage String?
  location     String?
  bio          String?
  idFront      String?
  idBack       String?
  birthDate    DateTime?
  gallery      String[] // Asumo que son claves de Supabase Storage
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relaciones con los TIPOS de servicios (categorías) que este perfil OFRECE
  servicesOffered Service[] @relation("ProfileServicesOffered")

  // Relación con los bookings donde este perfil es el SOLICITANTE
  bookings Booking[] @relation("BookingsMade")

  // Relación con las PUBLICACIONES que este perfil ha creado (si es PROVEEDOR)
  publications Publication[]

  @@map("profiles")
}

model Service {
  id          String  @id @default(cuid())
  title       String  @unique // El nombre del servicio (e.g., "Limpieza", "Jardinería")
  description String? // Descripción general del tipo de servicio

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // RELACIONES CORRECTAS:
  // Qué perfiles ofrecen este TIPO de servicio
  profilesOffering Profile[] @relation("ProfileServicesOffered")

  // Qué publicaciones están asociadas con este TIPO de servicio
  publications Publication[] // Un tipo de servicio puede estar en muchas publicaciones
}

// ===== NUEVO MODELO PARA LAS PUBLICACIONES (ANUNCIOS) =====
model Publication {
  id          String    @id @default(cuid())
  title       String // Título del anuncio específico
  description String // Descripción detallada del anuncio
  price       Decimal? // Precio numérico (opcional para "A Convenir")
  priceType   PriceType // <-- CAMBIO: Usamos el Enum PriceType
  images      String[] // Array de URLs/claves de imágenes de la publicación
  isActive    Boolean   @default(true) // Si la publicación está activa o no
  isDeleted   Boolean   @default(false) // <-- NUEVO: Para soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con el PROVEEDOR que creó la publicación
  providerId String
  provider   Profile @relation(fields: [providerId], references: [id], onDelete: Cascade)

  // Relación con el TIPO DE SERVICIO al que pertenece esta publicación
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  bookings Booking[] // Una publicación puede tener muchos bookings
}

// ===== MODELO BOOKING (para solicitudes) =====
model Booking {
  id            String       @id @default(cuid())
  // Relación con la publicación específica que se está reservando
  publicationId String?
  publication   Publication? @relation(fields: [publicationId], references: [id])

  // userId aquí es el ID del Profile que HACE LA SOLICITUD (el cliente)
  clientId String
  client   Profile @relation("BookingsMade", fields: [clientId], references: [id])

  date   DateTime // Fecha/hora de la reserva
  status String // Ej: "pending", "confirmed", "canceled", "completed"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  CLIENT
  PROVIDER
}

enum PriceType {
  FIXED
  HOURLY
  DAILY
  NEGOTIABLE
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== MODELOS DE NEXTAUTH CON NOMBRES DE TABLAS ESTÁNDAR =====
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("nextauth_accounts") // Nombre estándar para NextAuth
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("nextauth_sessions") // Nombre estándar para NextAuth
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile? // Relación opcional a Profile

  @@map("nextauth_users") // Nombre estándar para NextAuth
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("nextauth_verification_tokens") // Nombre estándar para NextAuth
}

// ===== MODELOS DE APLICACIÓN =====
model Profile {
  id           String    @id @default(cuid())
  authUserId   String    @unique
  user         User      @relation(fields: [authUserId], references: [id])
  email        String    @unique
  role         Role      @default(CLIENT)
  fullName     String?
  phoneNumber  String?
  profileImage String?
  location     String?
  bio          String?
  idFront      String?
  idBack       String?
  birthDate    DateTime?
  gallery      String[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relaciones con servicios
  servicesOffered   Service[] @relation("services_offered")
  servicesRequested Service[] @relation("services_requested")

  // Relación con bookings
  bookings Booking[]

  @@map("profiles")
}

model Service {
  id          String  @id @default(cuid())
  title       String
  description String
  price       Float? // <--- ¡Cámbialo a Float? (ahora es opcional)
  category    String
  imageUrl    String?
  location    String?

  // Proveedor (Profile)
  providerId String? // <--- ¡Cámbialo a String?
  provider   Profile? @relation("services_offered", fields: [providerId], references: [id]) // <--- ¡Y también la relación!

  // Cliente (Profile)
  requesterId String? // <--- ¡Cámbialo a String?
  requester   Profile? @relation("services_requested", fields: [requesterId], references: [id]) // <--- ¡Y también la relación!

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con bookings
  bookings Booking[]
}

model Booking {
  id        String  @id @default(cuid())
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  userId String
  user   Profile @relation(fields: [userId], references: [id])

  date   DateTime
  status String // Ej: pending, confirmed, canceled

  createdAt DateTime @default(now())
}

enum Role {
  CLIENT
  PROVIDER
}
